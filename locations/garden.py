from datetime import datetime, timezone, timedelta
import time
from threading import Thread
from content import goods


def event(user, bot, helpers):
    print("Event in garden")


def welcome(user, bot, helpers):
    keyboard = helpers.generate_keyboard(['–ü–æ—Å–∞–¥–∏—Ç—å –æ–≤–æ—â–∏', '–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—è–¥–∫–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ñ–µ—Ä–º—É'])
    bot.send_message(user['id'],
                     "–í—ã –Ω–∞ –æ–≥–æ—Ä–æ–¥–µ. –£ –≤–∞—Å –µ—Å—Ç—å –≥—Ä—è–¥–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å 10 –æ–≤–æ—â–µ–π."
                     " –ü–æ–∫—É–ø–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—è–¥–∫–∏ –º–æ–∂–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.", reply_markup=keyboard)
    current_time = datetime.now(timezone(timedelta(hours=3)))
    hour = current_time.hour
def select_ovosh(message, user, bot, helpers):
    buttons = [ '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ñ–µ—Ä–º—É', '–°–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤']
    keyboard = helpers.generate_keyboard(buttons)
    product = user["height"] * user["width"]
    if message.text in list(goods.vegetables.keys()):
        if goods.vegetables[message.text][1] * product <= user['balance']:
            user["what_plant"] = message.text
            bot.send_message(user['id'], ('[{}]'.format(message.text) * user['width'] + "\n") * user['height'])
            user["plant_time"] = time.time()
            print(user["plant_time"])
            user[goods.vegetables[message.text][0]] = product
            user["balance"] -= (goods.vegetables[message.text][1] * product)
            bot.send_message(user['id'], "–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {} –º–æ–Ω–µ—Ç".format(user["balance"]), reply_markup=keyboard)
            user["field_condition"] = 1
            user['grow_time'] = goods.vegetables[message.text][2]
            print(message.id, user['id'])
            '''
            a = Thread(target=animate_of_grow, args=(message.id, bot, user))
            a.start()
            '''
            print(user["field_condition"])
            print(user["what_plant"])
        else:
            bot.send_message(user['id'], "–£ –≤–∞—Å –Ω–µ–¥–æ—Å–∞—Ç–æ—á–Ω–æ –¥–µ–Ω—è–∫")
    else:
        bot.send_message(user['id'], "–≠—Ç –Ω–µ –æ–≤–∞—â")
    bot.register_next_step_handler(message, lambda x: process_message(x, user, bot, helpers))

'''
def animate_of_grow(message_id,chat_id,user,bot):
    time.sleep(1)
    #bot.edit_message_text(text='[.]\n' * 10, chat_id=user['id'], message_id=message_id)
    #bot.edit_message_text('.\n' * 10, user['id'], message_id)
    time.sleep(user['grow_time'])
    for i in range(10):
        bot.edit_message_text(text='[' + user['what_plant'] + '\n', chat_id=user['id'], message_id=message_id)
    del user['grow_time']
def start_grow(message, user, bot):
    message = bot.send_message(message.chat.id, ("[",user["what_plant"] * user['width'] +"]\n") * user['height'])
    print(("[",user["what_plant"] * user['width'] +"]\n") * user['height'])
    a = Thread(target=animate, args=(message.id, message.chat.id, bot, user))
    a.start_grow()
'''

def animate(message_id, chat_id, bot, user):
    time.sleep(0.5)
    for i in range(1, 11):
        bot.edit_message_text("[ ]\n" * i + ("[" + user["what_plant"] + "] " + "\n") * (11 - i), chat_id, message_id)
    time.sleep(0.5)
    '''
    for i in range(1,12):
        #bot.edit_message_text("[ ]\n" * i + ("[" + user["what_plant"] + "] "+"\n") * (11 - i), chat_id, message_id)
        message = bot.send_message(message.chat.id, ("[", user["what_plant"] * user['width'] + "]\n") * user['height'])
        time.sleep(0.5)
    bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ")
    '''

def start(message, user, bot):
    message = bot.send_message(message.chat.id, ("[",user["what_plant"] * user['width'] +"]\n") * user['height'])
    print(("[",user["what_plant"] * user['width'] +"]\n") * user['height'])
    t = Thread(target=animate, args=(message.id, message.chat.id, bot, user))
    t.start()
def process_message(message, user, bot, helpers):
    print(message)
    buttons = ["ü•ï", "ü•î", "üçÜ", "ü´ë", "üå∂", "üçÑ",'–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ñ–µ—Ä–º—É', '–°–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤']
    keyboard = helpers.generate_keyboard(buttons)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ñ–µ—Ä–º—É":
        helpers.change_location(user, "farm", bot, helpers)
        return
    user["field"] = [["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"],
                     ["[", "]"]]
    if message.text == "–°–∫–ª–∞–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤":
        bot.send_message(user, "–£ –≤–∞—Å {} –º–æ—Ä–∫–æ–≤–æ–∫\n"
                               "–£ –≤–∞—Å {} –∫–∞—Ä—Ç–æ—à–µ–∫\n"
                               "–£ –≤–∞—Å {} –±–∞–∫–ª–∞–∂–∞–Ω–æ–≤\n"
                               "–£ –≤–∞—Å {} –ø–µ—Ä—á–µ–≤\n"
                               "–£ –≤–∞—Å {} –≥–æ—Ä—è—á–∏—Ö –ø–µ—Ä—Ü–µ–≤\n"
                               "–£ –≤–∞—Å {} —Ö—Ä–∏–±–æ–≤\n".format(user["carrot"], user["potato"], user["eggplant"], user["pepper"],
                                                 user["pepper_hot"], user["mushrooms"]))

    if message.text == '–ü–æ—Å–∞–¥–∏—Ç—å –æ–≤–æ—â–∏':
        bot.send_message(user['id'], "–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â", reply_markup=keyboard)
        bot.register_next_step_handler(message, lambda x: select_ovosh(x, user, bot, helpers))
    if message.text == '–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π':
        if (time.time() > user["plant_time"] + user["grow_time"] + 60*60):
            bot.send_message(user['id'], "–û–≤–æ—à–∏ —Å–≥–Ω–∏–ª–∏")
            return
        if (time.time() - user["plant_time"] < user["grow_time"]):
            bot.send_message(user['id'], "–û–≤–æ—à–∏ –Ω–µ —Å–æ–∑—Ä–µ–ª–∏. –û—Å—Ç–∞–ª–æ—Å—å {} –º–∏–Ω—É—Ç".format(int(user["plant_time"]+user["grow_time"] - time.time())//60),  reply_markup=keyboard)
        if user["field_condition"] == 0:
            bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ")
        elif (time.time()- user["plant_time"] > user["grow_time"] ):
            bot.send_message(user['id'], "–°–æ–±–∏—Ä–∞–µ–º –æ–≤–æ—â–∏")
            start(message, user, bot)
            bot.send_message(user['id'], "–í—ã –ø–æ–ª—É—á–∏–ª–∏ {} {}".format(user["height"] * user["width"], user["what_plant"]), reply_markup=keyboard)
            user["field_condition"] = 0
    if message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä—è–¥–∫–∏":
        if user["field_condition"] == 0:
            bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ")
        else:
            if user["field_condition"] == 1:
                bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –∑–∞—Å–µ—è–Ω–æ",)
'''
def process_message(message, user, bot, helpers):
    print(message)
    buttons = ["ü•ï", "ü•î", "üçÜ", "ü´ë", "üå∂", "üçÑ"]
    keyboard = helpers.generate_keyboard(buttons)
    user["field_condition"] = 0
    user["field"] = [["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"], ["[", "]"],
                     ["[", "]"]]
    if message.text == '/plant':
        bot.send_message(user['id'], "–í—ã–±–µ—Ä–∏—Ç–µ –æ–≤–æ—â", reply_markup=keyboard)
        bot.register_next_step_handler(message, lambda x: select_ovosh(x, user, bot, helpers))

    if message.text == '/gather':
        print(user["field_condition"])
        if user["field_condition"] == 0:
            bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ")
        else:
            bot.send_message(user['id'], "–°–æ–±–∏—Ä–∞–µ–º –æ–≤–æ—â–∏")
            start(message, user, bot)
            bot.send_message(user['id'], "–í—ã –ø–æ–ª—É—á–∏–ª–∏ {} {}".format(user["height"] * user["width"], user["what_plant"]))
            user["field_condition"] = 0

    if message.text == "/field":
        if user["field_condition"] == 0:
            bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ")
        else:
            if user["field_condition"] == 1:
                bot.send_message(user['id'], "–í–∞—à–µ –ø–æ–ª–µ –∑–∞—Å–µ—è–Ω–æ")
'''
